name: Snapshot
on:
  push:
    branches:
      - '[6-9]+.[0-9]+.x'
  pull_request:
    branches:
      - '[6-9]+.[0-9]+.x'
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: ['11']
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: ${{ matrix.java }}
      - name: Run Build
        id: build
        uses: gradle/gradle-build-action@v3
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        with:
          arguments: build
      - name: Verify CLI
        if: success()
        run: |
          cp grails-cli/build/distributions/grails-cli-*.zip cli.zip
          unzip cli -d tmp
          mv tmp/grails-cli-* tmp/cli
          ./tmp/cli/bin/grails --version
      - name: Publish to Sonatype OSSRH
        id: publish
        if: steps.build.outcome == 'success' && github.event_name == 'push'
        uses: gradle/gradle-build-action@v3
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        with:
          arguments: publishToSonatype
  deploy:
    name: Deploy To Google Cloud Run
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: [build]
    env:
      IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}:snapshot
    steps:
      - name: Login
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
      - name: Configure Docker
        run: gcloud auth configure-docker --quiet
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'adopt'
          java-version: '11'
      - name: Run Tests
        uses: gradle/gradle-build-action@v3
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        with:
          arguments: grails-forge-api:test grails-forge-web-netty:test
      - name: Build Docker image
        # To deploy native executables built with GraalVM replace dockerBuild with dockerBuildNative and dockerPush with dockerPushNative. First, try that it works locally.
        uses: gradle/gradle-build-action@v3
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        with:
          arguments: grails-forge-web-netty:dockerBuildNative -PdockerImageName=${{ env.IMAGE_NAME }}
      - name: Push image to Google Cloud Container Registry
        uses: gradle/gradle-build-action@v3
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        with:
          arguments: grails-forge-web-netty:dockerPushNative -PdockerImageName=${{ env.IMAGE_NAME }}
      - name: Deploy Docker image
        run: gcloud run deploy ${{ secrets.GCP_PROJECT_ID }}-snapshot --image $IMAGE_NAME --region us-central1 --update-env-vars=HOSTNAME="snapshot.grails.org",CORS_ALLOWED_ORIGIN="https://start.grails.org",GITHUB_OAUTH_APP_CLIENT_ID=${{ secrets.GH_OAUTH_SNAPSHOT_CLIENT_ID }},GITHUB_OAUTH_APP_CLIENT_SECRET=${{ secrets.GH_OAUTH_SNAPSHOT_CLIENT_SECRET }},GITHUB_USER_AGENT=${{ secrets.GH_USER_AGENT }},GITHUB_REDIRECT_URL=${{ secrets.GH_REDIRECT_URL }} --platform managed --allow-unauthenticated --service-account=${{ secrets.GCLOUD_EMAIL }}
  deployAnalytics:
    name: Deploy Analytics To Google Cloud Run
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: [build]
    env:
      IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}-analytics:snapshot
    steps:
      - name: Login
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
      - name: Configure Docker
        run: gcloud auth configure-docker --quiet
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'adopt'
          java-version: '11'
      - name: Run Tests
        uses: gradle/gradle-build-action@v3
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        with:
          arguments: grails-forge-analytics-postgres:test
      - name: Build Docker image
        uses: gradle/gradle-build-action@v3
        # To deploy native executables built with GraalVM replace dockerBuild with dockerBuildNative and dockerPush with dockerPushNative. First, try that it works locally.
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        with:
          arguments: grails-forge-analytics-postgres:dockerBuildNative -PdockerImageName=${{ env.IMAGE_NAME }}
      - name: Push image to Google Cloud Container Registry
        uses: gradle/gradle-build-action@v3
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        with:
          arguments: grails-forge-analytics-postgres:dockerPushNative -PdockerImageName=${{ env.IMAGE_NAME }}
      - name: Deploy Docker image
        run: |
          gcloud components install beta --quiet
          gcloud run deploy ${{ secrets.GCP_PROJECT_ID }}-analytics-snapshot --image $IMAGE_NAME --region us-central1 --platform managed --allow-unauthenticated --service-account=${{ secrets.GCLOUD_EMAIL }}

  linux:
    name: Builds Linux Native CLI
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Setup GraalVM CE
        uses: graalvm/setup-graalvm@v1.1.9
        with:
          version: '21.3.3.1'
          java-version: '11'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build the JAR
        uses: gradle/gradle-build-action@v3
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        with:
          arguments: grails-cli:shadowJar --no-daemon
      - name: Build Native Image
        run: native-image --no-fallback --allow-incomplete-classpath -cp grails-cli/build/libs/grails-cli-*-all.jar
      - name: Verify Build
        run: ./grails --version
      - name: Verify Create App
        run: ./grails create-app test
      - name: Package Build
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          mkdir -p grails-linux-amd64-snapshot/bin
          mv ./grails grails-linux-amd64-snapshot/bin
          cp ./LICENSE grails-linux-amd64-snapshot/
          zip -r grails-linux-amd64-snapshot.zip ./grails-linux-amd64-snapshot
      - name: Upload Snapshot
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/6.0.x'
        uses: actions/upload-artifact@v4
        with:
          name: grails-linux-amd64-snapshot
          path: grails-linux-amd64-snapshot.zip
  macos:
    name: Builds OS X Native CLI
    runs-on: macos-latest
    needs: [build]
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Setup GraalVM CE
        uses: graalvm/setup-graalvm@v1.1.9
        with:
          version: '21.3.3.1'
          java-version: '11'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build the JAR
        uses: gradle/gradle-build-action@v3
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        with:
          arguments: grails-cli:shadowJar --no-daemon
      - name: Build Native Image
        run: native-image --no-fallback --allow-incomplete-classpath -cp grails-cli/build/libs/grails-cli-*-all.jar
      - name: Verify Build
        run: ./grails --version
      - name: Verify Create App
        run: ./grails create-app test
      - name: Package Build
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          mkdir -p grails-darwin-amd64-snapshot/bin
          mv ./grails grails-darwin-amd64-snapshot/bin
          cp ./LICENSE grails-darwin-amd64-snapshot/
          zip -r grails-darwin-amd64-snapshot.zip ./grails-darwin-amd64-snapshot -x '*.DS_Store*' -x '__MAC_OSX'
      - name: Upload Snapshot
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/6.0.x'
        uses: actions/upload-artifact@v4
        with:
          name: grails-darwin-amd64-snapshot
          path: grails-darwin-amd64-snapshot.zip
  windows:
    name: Builds Windows Native CLI
    runs-on: windows-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Setup GraalVM CE
        uses: graalvm/setup-graalvm@v1.1.9
        with:
          version: '21.3.3.1'
          java-version: '11'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build JAR File
        uses: gradle/gradle-build-action@v3
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        with:
          arguments: grails-cli:copyShadowJar --no-daemon
      - name: Build Native Image
        shell: powershell
        run: native-image.cmd --no-fallback --allow-incomplete-classpath -cp build/libs/cli.jar
      - name: Verify Build (Powershell)
        shell: powershell
        run: ./grails.exe --version
      - name: Verify Create App (Powershell)
        run: ./grails.exe create-app test
      - name: Verify Build (CMD)
        shell: cmd
        run: grails --version
      - name: Verify Create App (CMD)
        shell: cmd
        run: grails create-app test2
      - name: ZIP Archive
        run: |
          New-Item "./grails-win-amd64-snapshot/bin" -ItemType Directory -ea 0
          Move-Item -Path ./grails.exe -Destination "./grails-win-amd64-snapshot/bin"
          Copy-Item "./LICENSE" -Destination "./grails-win-amd64-snapshot"
          Compress-Archive -Path "./grails-win-amd64-snapshot" -Update -DestinationPath ./grails-win-amd64-snapshot.zip
      - name: Publish artifact
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/6.0.x'
        uses: actions/upload-artifact@v4
        with:
          name: grails-win-amd64-snapshot
          path: ./grails-win-amd64-snapshot.zip

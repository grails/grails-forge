@import java.util.function.Function
@import org.grails.forge.application.ApplicationType
@import org.grails.forge.build.dependencies.CoordinateResolver
@import org.grails.forge.application.Project
@import org.grails.forge.build.dependencies.Coordinate
@import org.grails.forge.build.gradle.GradleBuild
@import org.grails.forge.build.gradle.GradleDsl
@import org.grails.forge.build.gradle.GradlePlugin
@import org.grails.forge.feature.Features
@import org.grails.forge.options.TestFramework
@import org.grails.forge.util.VersionInfo

@args (
ApplicationType applicationType,
Project project,
Function<String, Coordinate> coordinateResolver,
Features features,
GradleBuild gradleBuild
)

@seleniumVersion => { @coordinateResolver.apply("selenium-api").getVersion() }
@assetPipelineVersion => { @coordinateResolver.apply("asset-pipeline-grails").getVersion() }

@for (String importLine : gradleBuild.getPluginsImports()) {
@(importLine)
}
plugins {
@for (GradlePlugin gradlePlugin : gradleBuild.getPlugins()) {
    @if(gradlePlugin.getId() == "com.bertramlabs.asset-pipeline") {
        id "com.bertramlabs.asset-pipeline" version "@assetPipelineVersion"
    } else {
        id "@gradlePlugin.getId()"
    }
}
}

group = "@project.getPackageName()"

@if (features.contains("asciidoctor")) {
apply from: "gradle/asciidoc.gradle"
}

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core/" }
}

configurations {
    all {
        @if (features.contains("geb")) {
        resolutionStrategy.eachDependency { DependencyResolveDetails details->
            if (details.requested.group == 'org.seleniumhq.selenium') {
                details.useVersion('@seleniumVersion')
            }
        }
        }
    }
}

@dependencies.template(applicationType, project, features, gradleBuild)

@if (features.mainClass().isPresent()) {
application {
    mainClass.set("@features.mainClass().get()")
}

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(@features.getTargetJdk())
    }
}

@if (features.contains("jrebel")) {
run {
    dependsOn(generateRebel)
    if (project.hasProperty("rebelAgent")) {
        jvmArgs(rebelAgent)
    }
}

}

@if (features.contains("springloaded")) {
run {
    jvmArgs("-noverify", "-javaagent:agent/springloaded-1.2.8.RELEASE.jar")
}

}

@if (features.contains("spock")) {
tasks.withType(Test) {
    useJUnitPlatform()
    @if (features.contains("geb")) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
    systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
    }
}
}

@gradleBuild.renderExtensions()

plugins {
    id "org.grails.forge.internal.build.cli-module"
    id 'org.graalvm.buildtools.native' version '0.10.3'
}

sourceSets {
    main {
        rocker {
            srcDir("src/main/java")
        }
    }
}

ext {
    picocliVersion = '4.7.5'
}

configurations.all {
    resolutionStrategy {
        // prevent fatJar result containing multiple versions of picocli
        force("info.picocli:picocli:$picocliVersion")
    }
}

configurations {
    generateConfig
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-graal")
    api project(":grails-forge-core")
    api "info.picocli:picocli:${picocliVersion}"
    api "info.picocli:picocli-shell-jline3:${picocliVersion}"
    api "com.fizzed:rocker-runtime:$rockerVersion"
    implementation "org.slf4j:slf4j-nop:2.0.16"
    implementation "org.fusesource.jansi:jansi:2.4.0"
    implementation "org.yaml:snakeyaml:2.2"
    implementation group: 'javax.inject', name: 'javax.inject', version: '1'
    implementation 'org.shredzone.acme4j:acme4j-client:3.2.1'
    implementation 'org.shredzone.acme4j:acme4j-utils:2.16'
    generateConfig "info.picocli:picocli-codegen:${picocliVersion}"
    compileOnly "com.google.code.findbugs:jsr305"
    compileOnly "org.graalvm.nativeimage:svm"
    testImplementation("io.micronaut.picocli:micronaut-picocli")
    testImplementation "org.testcontainers:spock"
    testImplementation 'org.reflections:reflections:0.10.2'
}

graalvmNative {
    toolchainDetection = false

    binaries {
        main {
            // Main options
            sharedLibrary = false
            imageName = "grails"
            buildArgs(
                "--add-exports=org.graalvm.nativeimage.builder/com.oracle.svm.core.configure=ALL-UNNAMED",
                "--add-exports=org.graalvm.nativeimage.builder/com.oracle.svm.core.jdk=ALL-UNNAMED",
                "--add-exports=org.graalvm.nativeimage.builder/com.oracle.svm.core.jni=ALL-UNNAMED",
                "--add-exports=org.graalvm.sdk/org.graalvm.nativeimage.impl=ALL-UNNAMED",
                "-H:+ReportExceptionStackTraces"
            )
            if (project.hasProperty("musl")) {
                logger.lifecycle("Using musl libc")
                buildArgs("--libc=musl", "--static")
            }
            mainClass = "org.grails.forge.cli.Application"
        }
    }
}

application {
    mainClass = "org.grails.forge.cli.Application"
}

rocker {
    postProcessing = ['org.grails.forge.rocker.plugin.WhitespaceProcessor']
}

startScripts {
    applicationName = 'grails'
}

sdkman {
    api = "https://vendors.sdkman.io"
    consumerKey = System.getenv("GVM_SDKVENDOR_KEY") ?: project.hasProperty("gvmSdkvendorKey") ? project.gvmSdkvendorKey : ''
    consumerToken = System.getenv("GVM_SDKVENDOR_TOKEN") ?: project.hasProperty("gvmSdkvendorToken") ? project.gvmSdkvendorToken : ''
    candidate = "grails"
    version = project.version
    hashtag = "#grailsfw"
    platforms = [
            "MAC_ARM64":"https://github.com/grails/grails-forge/releases/download/v${project.version}/grails-darwin-aarch64-v${project.version}.zip",
            "MAC_OSX":"https://github.com/grails/grails-forge/releases/download/v${project.version}/grails-darwin-amd64-v${project.version}.zip",
            "WINDOWS_64":"https://github.com/grails/grails-forge/releases/download/v${project.version}/grails-win-amd64-v${project.version}.zip",
            "LINUX_64":"https://github.com/grails/grails-forge/releases/download/v${project.version}/grails-linux-amd64-v${project.version}.zip"
    ]
}